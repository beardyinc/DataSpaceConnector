openapi: 3.0.1
paths:
  /assets:
    get:
      operationId: getAllAssets
      parameters:
      - in: query
        name: offset
        schema:
          type: integer
          format: int32
      - in: query
        name: limit
        schema:
          type: integer
          format: int32
      - in: query
        name: filter
        schema:
          type: string
      - in: query
        name: sort
        schema:
          type: string
          enum:
          - ASC
          - DESC
      - in: query
        name: sortField
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetDto'
        "400":
          description: "The request body was not formatted properly, e.g. required\
            \ fields were not found"
      summary: Returns all assets based on a specific query.
      tags:
      - Asset
    post:
      operationId: createAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetEntryDto'
      responses:
        "400":
          description: "The request body was not formatted properly, e.g. required\
            \ fields were not found"
        "409":
          description: "An asset with that ID cannot be created, because it already\
            \ exists"
      summary: Creates a new asset together with a data address
      tags:
      - Asset
  /assets/{id}:
    delete:
      operationId: removeAsset
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Object was deleted successfully
        "400":
          description: The request was improperly formatted
        "409":
          description: The asset could not be deleted because it is already used in
            a contract agreement
      summary: Deletes an asset with the given ID
      tags:
      - Asset
    get:
      operationId: getAsset
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: finds an asset by ID
        "400":
          description: The request was improperly formatted
        "404":
          description: Asset was not found
      summary: Get asset with the specified ID
      tags:
      - Asset
components:
  schemas:
    AssetDto:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: object
      required:
      - properties
    AssetEntryDto:
      type: object
      properties:
        asset:
          $ref: '#/components/schemas/AssetDto'
        dataAddress:
          $ref: '#/components/schemas/DataAddressDto'
      required:
      - asset
      - dataAddress
    DataAddressDto:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: string
